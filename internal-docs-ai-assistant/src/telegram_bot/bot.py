import asyncio
import os
import generator

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    BotCommand
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.filters import Command
from dotenv import load_dotenv
from pathlib import Path

env_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=env_path)

FILES_DIR = os.getenv("FILES_DIR")
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

commands = [BotCommand(command='start',
                           description='–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'),
                BotCommand(command='help',
                           description='–ø–æ–º–æ—â—å'),
                BotCommand(command='files',
                           description='–≤—Å–µ —Ñ–∞–π–ª—ã'),
                BotCommand(command='delete',
                           description='—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª'),
                BotCommand(command='generate',
                           description='–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Q&A')]

class DeleteFile(StatesGroup):
    waiting_for_file_selection = State()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
                         "–Ø ‚Äî –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.  "
                         "–ó–∞–≥—Ä—É–∂–∞—é, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Ö—Ä–∞–Ω—é –≤–∞–∂–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, "
                         "—á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
                         "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ pdf-—Ñ–∞–π–ª –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!"
                         "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("‚ú® –ß—Ç–æ —è —É–º–µ—é:"
                         "\n/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
                         "\n/files - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
                         "\n/delete - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
                         "\n/generate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"
                         "\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ, "
                         "–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª")


@dp.message(F.document)
async def handle_document(message: Message):
    document = message.document

    if not document.file_name.lower().endswith('.pdf'):
        await message.reply("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf")
        return

    file_name = document.file_name
    user_id = message.from_user.id

    file_id = document.file_id
    file = await bot.get_file(file_id)

    dir = str(user_id)
    if not dir in os.listdir(FILES_DIR):
        os.makedirs(os.path.join(FILES_DIR, dir), exist_ok=True)

    file_path = os.path.join(FILES_DIR, dir, file_name)

    await bot.download_file(file.file_path, file_path)

    await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")


@dp.message(Command("files"))
async def cmd_files(message: Message):
    user_id = message.from_user.id
    dir = str(user_id)

    if not dir in os.listdir(FILES_DIR):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    files = os.listdir(os.path.join(FILES_DIR, dir))
    file_list = '\n'.join(['‚Ä¢ ' + os.path.basename(file) for file in files])
    await message.answer(f'–í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{file_list}')


@dp.message(Command("delete"))
async def cmd_delete(message: Message):
    user_id = message.from_user.id
    dir = str(user_id)

    if not dir in os.listdir(FILES_DIR):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    files = os.listdir(os.path.join(FILES_DIR, dir))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=os.path.basename(file),
                              callback_data=f"delete_{os.path.basename(file)}")]
        for file in files
    ])

    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith('delete_'))
async def process_file_deletion(callback_query: CallbackQuery, state: FSMContext):
    selected_file = callback_query.data.replace('delete_', '', 1)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{selected_file}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        ]
    ])

    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª '{selected_file}'?",
        reply_markup=keyboard
    )
    await state.set_state(DeleteFile.waiting_for_file_selection)


@router.callback_query(lambda c: c.data.startswith('confirm_'))
async def confirm_deletion(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    dir = str(user_id)

    file_to_delete = callback_query.data.replace('confirm_', '', 1)

    file_path = os.path.join(FILES_DIR, dir, file_to_delete)
    os.remove(file_path)

    await callback_query.message.edit_text(f"–§–∞–π–ª '{file_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await state.clear()


@router.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_deletion(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.message(Command("generate"))
async def cmd_generate(message: Message):
    user_id = message.from_user.id
    dir = str(user_id)

    if not dir in os.listdir(FILES_DIR):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    paths = [os.path.join(FILES_DIR, dir, file) for file in os.listdir(os.path.join(FILES_DIR, dir))]
    result = generator.generate(paths)
    for obj in result:
        await message.answer(f'–í–æ–ø—Ä–æ—Å: {obj["question"]}\n–û—Ç–≤–µ—Ç: {obj["answer"]}')


dp.include_router(router)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.set_my_commands(commands)
    await dp.start_polling(bot)


if __name__ == "__main__":
    os.makedirs(FILES_DIR, exist_ok=True)
    asyncio.run(main())
