import re
import os

from dotenv import load_dotenv
from pathlib import Path
from langchain_gigachat import GigaChat
from langchain_core.language_models import BaseChatModel
from langchain_community.document_loaders import PyPDFLoader
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain


env_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=env_path)


def get_model(model_name: str = "GigaChat-2") -> BaseChatModel:
    api_key = os.getenv("GIGACHAT_AUTHORIZATION_KEY")
    if not api_key:
        raise ValueError("GIGACHAT_AUTHORIZATION_KEY not found in .env")

    giga = GigaChat(
        credentials=api_key,
        verify_ssl_certs=False,
        scope="GIGACHAT_API_PERS",
        model=model_name
    )
    return giga


docs_dir = "documents"
pdf_files = [f for f in os.listdir(docs_dir) if f.endswith(".pdf")]

all_docs = []
for pdf_file in pdf_files:
    loader = PyPDFLoader(os.path.join(docs_dir, pdf_file))
    docs = loader.load()
    all_docs.extend(docs)

texts = [doc.page_content for doc in all_docs]

llm = get_model()

prompt = PromptTemplate.from_template("""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—ã ¬´–≤–æ–ø—Ä–æ—Å‚Äì–æ—Ç–≤–µ—Ç¬ª –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.
–°–æ–∑–¥–∞–π 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–π –Ω–∞ –Ω–∏—Ö –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, 
–æ—Ç–≤–µ—á–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ª–∏–±–æ –ø–∏—à–µ—å —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–∞.
–ß—ë—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –í–æ–ø—Ä–æ—Å: –∏ –û—Ç–≤–µ—Ç:

–¢–µ–∫—Å—Ç:
{text}
""")

chain = LLMChain(llm=llm, prompt=prompt)

print("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã...")
response = chain.invoke({"text": texts})
output = response["text"]

print("\n‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç:")
pattern = r'–í–æ–ø—Ä–æ—Å: (.*?)\s*–û—Ç–≤–µ—Ç: (.*?)(?=\n|$)'
matches = re.findall(pattern, output, re.DOTALL)

for q, a in matches:
    print(f"‚ùì –í–æ–ø—Ä–æ—Å: {q.strip()}")
    print(f"‚úÖ –û—Ç–≤–µ—Ç: {a.strip()}")
    print("-" * 60)
